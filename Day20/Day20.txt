回顾:
学习了基本的4个父类的流
分别是
字节输入输出流
InputStream 和 OutputStream
字符输入输出流
Reader  和     Writer
因为InputStream 和 OutputStream 是抽象类 所以不能直接new对象
所以这里需要使用其子类流:  
IO --> Input 和  Output  
需要实现的就是 如何 将 内存中的数据写入到磁盘汇中   在从磁盘中将数据读取到内存中
既然写到磁盘最好的保存方式就是文件,所以这里就需要使用文件字节流
FileInputStream 和 FileOutputStream
那么无论如何大家必须记住几个点:
1.现在用的是什么流
2.流的流向是什么  是读取  还是写出
3.需要知道流中的数据是什么 是字节 还是字符
只要掌握以上三点ok什么流都可以写
除了上面这些还要记住如何循环读取数据  read(byte[] b)  和  wirter(byte[],int offset,int len)
只要流就需要关闭资源   和 写流的时候 可以刷新

使用字节流完成一张图片的读写操作--->文件
看InandOutStream包

总结:
字节流的应用:可以拷贝文件(音频,视频,图像,压缩,doc,exe等等)
                       字节流千万不要用来拷贝文本文件,因为可能出现乱码
                       
字符输入输出流(专门用来拷贝文本文件的)  
Reader 字符输入流
Writer 字符输出流
可以使用字符流来进行文件的读写操作,汉子一些特殊字符都可以应对并且不会乱码的问题
字符流和字节流最大的不同就是
流中的数据不同: 字符 char   字节 byte
Reader和Writer是抽象类不能直接创建对象,此时使用	其之类的方式来完成对象的构建
FileReader 和 FileWriter 子类
读取和写出方式和FileInputStream和FileOutputStream是一样的
只不过这里我们使用的是字符流,所以流中的数据是字符char
批量存储数据的话需要使用是字符数组 char[] 
常用方法:
构造方法摘要 
FileReader(File file) 通过File对象创建字符输入流
FileReader(String fileName) 通过路径创建字符输入流
read(char[] cbuf, int off, int len) 将字符读入数组的某一部分
若返回值是-1 证明读取到文件末尾,不是的就是实际读取的长度

FileWriter(File file) 通过File对象创建字符输出流对象
FileWriter(File file, boolean append)   通过File对象创建字符输出流对象,传入true值可以追加(参考字节流)
FileWriter(String fileName) 通过路径创建字符输出流
FileWriter(String fileName, boolean append) 通过路径创建字符输出流,传入true值可以追加(参考字节流)          
write(char[] cbuf, int off, int len) 写入字符数组的某一部分。
字符数组,从字符数组开始写,实际长度是多少
close() 关闭此流，但要先刷新它。 
void flush()  刷新该流的缓冲。 
看 Reader 包 和 Writer包


需求:使用字符流完成一张图片的读写操作--->文件 将当前图片打开
 总结:
  字符流和字节流的基本应用是一样,但是应用场景是完全不同
 字符流主要应用于文本文件的读取和写入操作,不要使用字符完成特殊文件(音频,视频,图片,压缩包等等)的拷贝
看ReaderAndWriter包

标准输入输出流:(重定向)
System.in 标准输入流  数据类型是InputStream 所以当前类所以字节流
System.out 标准输出流 数据类型是 PrintStream 打印字节输出流 也属于字节流
ps:Scanner input = new Scanner(System.in);
   System.out.println("控制台上")

若需要修改标准输入输出流的流向此时需要使用如下两个方法
这两个方法属于System类 并且是静态方法,所以可以直接调用
static void setIn(InputStream in) 
          重新分配“标准”输入流。 
static void setOut(PrintStream out) 
          重新分配“标准”输出流。 
看SystemInAndOut

需求:将"老子写完了"这句话重新打印到控制台;



字符编码发展过程
阶段1:
计算机只认识数字,我们在计算机里一切数据都是以数字来表示,因为英文符号有限,
所以规定使用的字节的最高位是0.每一个字节都是以0~127之间的数字来表示,比如A对应65,a对应97.
这就是美国标准信息交换码-ASCII.

阶段2:
随着计算机在全球的普及,很多国家和地区都把自己的字符引入了计算机,比如汉字.(易语言(中文)-->java)
此时发现一个字节能表示数字范围太小,不能包含所有的中文汉字,那么就规定使用两个字节来表示一个汉字.
规定:原有的ASCII字符的编码保持不变,仍然使用一个字节表示,为了区别一个中文字符与两个ASCII码字符,
中文字符的每个字节最高位规定为1(中文的二进制是负数).这个规范就是GB2312编码,
后来在GB2312的基础上增加了更多的中文字符,比如汉字,也就出现了GBK.

阶段3: 
新的问题,在中国是认识汉字的,但是如果把汉字传递给其他国家,该国家的码表中没有收录汉字,其实就显示另一个符号或者乱码.
为了解决各个国家因为本地化字符编码带来的影响,咱们就把全世界所有的符号统一进行编码-Unicode编码(万国码).
\u0000 ~ \uFFFF
此时某一个字符在全世界任何地方都是固定的,比如'哥',在任何地方都是以十六进制的54E5来表示.
Unicode的编码字符都占有2个字节大小.
--------------------------------------------------------------------------------------------------------------
常见的字符集:
ASCII: 占一个字节,只能包含128个符号. 不能表示汉字
ISO-8859-1:(latin-1):占一个字节,收录西欧语言(西文),不能表示汉字.
ANSI:占两个字节,在简体中文的操作系统中 ANSI 就指的是 GB2312.
GB2312/GBK/GB18030:占两个字节,支持中文.
UTF-8:是一种针对Unicode的可变长度字符编码，又称万国码,是Unicode的实现方式之一。
编码中的第一个字节仍与ASCII兼容，这使得原来处理ASCII字符的软件无须或只须做少部份修改，即可继续使用。
因此，它逐渐成为电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。
UTF-8 BOM:是MS搞出来的编码,默认占3个字节,不要使用这个.   
存储数据,数度的第第一位 出现  ?
你好北京天安门! --->  ?你好北京天安门!   --> 修改文件的编码集,手动Notpad++文本编辑器

--------------------------------------------------------------------------------------------------------------

存储字母,数字和汉字:
存储字母和数字无论是什么字符集都占1个字节.
存储汉字:   GBK家族占两个字节,UTF-8家族占3个字节(变长).

--------------------------------------------------------------------------------------------------------------

不能使用单字节的字符集(ASCII/ISO-8859-1)来存储中文.

转换流:
InputStreamReader 字节流转换为字符流
OutputStreamWriter 字符流转换为字节流
设置编码并加强 字节流的使用
字节流  读取特殊文件 / 文本文件
字符流   文本文件
ps:读取时字节编码就设置错误,打印时就不会成功
      读取时就是错误,打印时肯定是错误,所以在设置编码时一定要设置正确
      读取时是正确的,打印的时候就可以改变其编码
 
 
InputStreamReader 的父类是谁?   是什么流转什么流
   父类是Reader   字符流      字节流转换字符流
构造方法摘
InputStreamReader(InputStream in) 通过字节流对象创建当前转换流对象
InputStreamReader(InputStream in, Charset cs) 通过字节流对象创建当前转换流对象,并且可以制定读取文件的编码集
InputStreamReader(InputStream in, String charsetName) 通过字节流对象创建当前转换流对象,并且可以制定读取文件的编码集
若是使用CharSet形式  CharSet.forName("GBK") --> 小括号中是一个字符串,写编码名称即可         
若是使用字符串形式 就直接传入编码名即可  "UTF-8"
void close() 关闭该流并释放与之关联的所有资源。 
int read(char[] cbuf, int offset, int length) 将字符读入数组中的某一部分。 
看InputStreamReader包


OutputStreamWriter 的父类是谁?  是什么流转什么流
   父类是Writer  字符流      字符流转字节流
构造方法
OutputStreamWriter(OutputStream out)通过字节流对象创建当前转换流对象   
OutputStreamWriter(OutputStream out, Charset cs) 通过字节流对象创建当前转换流对象,并且可以制定读取文件的编码集
OutputStreamWriter(OutputStream out, String charsetName)  通过字节流对象创建当前转换流对象,并且可以制定读取文件的编码集
若是使用CharSet形式  CharSet.forName("GBK") --> 小括号中是一个字符串,写编码名称即可         
若是使用字符串形式 就直接传入编码名即可  "UTF-8"
void close() 关闭此流，但要先刷新它。 
void flush()     刷新该流的缓冲。 
void write(char[] cbuf, int off, int len) 写入字符数组的某一部分。
 

需求:使用转换流来完成文件的读取和写入操作,实现文件的拷贝
1.源文件的编码集是UTF-8
    目标文件的编码就是GBK
2.源文件的编码集是GBK
    目标文件的编辑是UTF-8 
3.源文件的编码集是UTF-8
   目标文件的编码集是UTF-8 
   
总结:转换流的作用其实就是加强字节流的文件读写能力
         转换流可以防止文件乱码,可以设置编码值   
看InReaderAndOutWriter

内存流(了解)   ---> 设计模式  --> 适配器模式
内存计算的效率要比磁盘高,磁盘要发生IO读写操作
ps:请不要以自己电脑的内存取比较服务器内存 
1.字节内存流:ByteArrayInputStream/ByteArrayOutputStream
2.字符内存流:CharArrayReader/CharArrayWriter
3.字符串内存StringReader/StringWriter
数据都是临时存储到内存:
以数组名在内的内存流,临时存储到数组中然后在取出来
以字符串在内的内存流,临时存储到字符串中然后在取出来


缓冲流
字节缓冲流:
在操作数据的时候,先将数据存储到内部的缓冲区中(字节数组),然后,程序操作缓冲区的数据
最大的特点,可以提法哦流中传输的数据,非常建议使用这个流
BufferedInputStream 字节输入缓冲流
BufferedOutputStream 字节输出缓冲流
这个流之所以是缓冲路在于它创建对象的方法



























